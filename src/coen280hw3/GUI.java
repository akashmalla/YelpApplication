/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coen280hw3;

import coen280hw3.Populate.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author akashmalla
 */
public class GUI extends javax.swing.JFrame {

    private static Connection con;

    /**
     * Creates new form GUI
     */
    public GUI() {
        try {
            initComponents();
            con = Populate.openConnection();
        } catch (SQLException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static DefaultTableModel buildTableModel(ResultSet rs)
            throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new DefaultTableModel(data, columnNames);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        businessPanel = new javax.swing.JPanel();
        categoriesScrollPane = new javax.swing.JScrollPane();
        categoriesPanel = new javax.swing.JPanel();
        activeLifeCheckBox = new javax.swing.JCheckBox();
        artsEntertainmentCheckBox = new javax.swing.JCheckBox();
        automotiveCheckBox = new javax.swing.JCheckBox();
        carRentalCheckBox = new javax.swing.JCheckBox();
        cafesCheckBox = new javax.swing.JCheckBox();
        beautySpasCheckBox = new javax.swing.JCheckBox();
        convenienceStoresCheckBox = new javax.swing.JCheckBox();
        dentistsCheckBox = new javax.swing.JCheckBox();
        doctorsCheckBox = new javax.swing.JCheckBox();
        drugstoresCheckBox = new javax.swing.JCheckBox();
        departmentStoresCheckBox = new javax.swing.JCheckBox();
        educationCheckBox = new javax.swing.JCheckBox();
        eventPlanningServicesCheckBox = new javax.swing.JCheckBox();
        flowersGiftsCheckBox = new javax.swing.JCheckBox();
        foodCheckBox = new javax.swing.JCheckBox();
        healthMedicalCheckBox = new javax.swing.JCheckBox();
        homeServicesCheckBox = new javax.swing.JCheckBox();
        homeGardenCheckBox = new javax.swing.JCheckBox();
        hospitalsCheckBox = new javax.swing.JCheckBox();
        hotelsTravelCheckBox = new javax.swing.JCheckBox();
        hardwareStoresCheckBox = new javax.swing.JCheckBox();
        groceryCheckBox = new javax.swing.JCheckBox();
        medicalCentersCheckBox = new javax.swing.JCheckBox();
        nurseriesGardeningCheckBox = new javax.swing.JCheckBox();
        nightlifeCheckBox = new javax.swing.JCheckBox();
        restuarantsCheckBox = new javax.swing.JCheckBox();
        shoppingCheckBox = new javax.swing.JCheckBox();
        transportationCheckBox = new javax.swing.JCheckBox();
        subCategoriesScrollPane = new javax.swing.JScrollPane();
        subCategoriesPanel = new javax.swing.JPanel();
        getSubCategoriesButton = new javax.swing.JButton();
        IncludeBusnCat = new javax.swing.JCheckBox();
        checkinPanel = new javax.swing.JPanel();
        fromDayComboBox = new javax.swing.JComboBox();
        toDayComboBox = new javax.swing.JComboBox();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        toTextField = new javax.swing.JTextField();
        fromTextField = new javax.swing.JTextField();
        numOfCheckinsPanel = new javax.swing.JPanel();
        valueOfCheckinsTextField = new javax.swing.JTextField();
        checkinConditionLabel = new javax.swing.JLabel();
        CheckinSign = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        includeCheckinCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        starsPanel = new javax.swing.JPanel();
        valueOfStarsTextField = new javax.swing.JTextField();
        checkinConditionLabel2 = new javax.swing.JLabel();
        starsSignComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        votesPanel = new javax.swing.JPanel();
        valueOfVotesTextField = new javax.swing.JTextField();
        votesValueLabel = new javax.swing.JLabel();
        votesConditionComboBox = new javax.swing.JComboBox();
        votesConditionLabel = new javax.swing.JLabel();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        includeReviewCheckBox = new javax.swing.JCheckBox();
        userPanel = new javax.swing.JPanel();
        memberSinceLabel = new javax.swing.JLabel();
        numOfFriendsPanel = new javax.swing.JPanel();
        valueOfNumOfFriendsTextField = new javax.swing.JTextField();
        numOfFriendsValueLabel = new javax.swing.JLabel();
        numOfFriendsComboBox = new javax.swing.JComboBox();
        numOfFriendsLabel = new javax.swing.JLabel();
        reviewCountPanel = new javax.swing.JPanel();
        valueOfReviewCountTextField = new javax.swing.JTextField();
        reviewCountValueLabel = new javax.swing.JLabel();
        reviewCountComboBox = new javax.swing.JComboBox();
        reviewCountLabel = new javax.swing.JLabel();
        avgStarsPanel = new javax.swing.JPanel();
        valueOfAvgStarsTextField = new javax.swing.JTextField();
        avgStarsValueLabel = new javax.swing.JLabel();
        avgStarsComboBox = new javax.swing.JComboBox();
        avgStarsLabel = new javax.swing.JLabel();
        selectLabel = new javax.swing.JLabel();
        selectWhereComboBox = new javax.swing.JComboBox();
        memberSinceDateChooser = new com.toedter.calendar.JDateChooser();
        userQueryCheckBox = new javax.swing.JCheckBox();
        executeQueryPanel = new javax.swing.JPanel();
        buildQueryScrollPane = new javax.swing.JScrollPane();
        buildQueryTextArea = new javax.swing.JTextArea();
        executeQueryButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        businessPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Business"));

        categoriesScrollPane.setBackground(new java.awt.Color(238, 238, 238));
        categoriesScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Categories"));

        activeLifeCheckBox.setText("Active Life");

        artsEntertainmentCheckBox.setText("Arts & Entertainment");

        automotiveCheckBox.setText("Automotive");

        carRentalCheckBox.setText("Car Rental");

        cafesCheckBox.setText("Cafes");

        beautySpasCheckBox.setText("Beauty & Spas");
        beautySpasCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beautySpasCheckBoxActionPerformed(evt);
            }
        });

        convenienceStoresCheckBox.setText("Convenience Stores");
        convenienceStoresCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convenienceStoresCheckBoxActionPerformed(evt);
            }
        });

        dentistsCheckBox.setText("Dentists");

        doctorsCheckBox.setText("Doctors");

        drugstoresCheckBox.setText("Drugstores");

        departmentStoresCheckBox.setText("Department Stores");

        educationCheckBox.setText("Education");

        eventPlanningServicesCheckBox.setText("Event Planning & Services");

        flowersGiftsCheckBox.setText("Flowers & Gifts");

        foodCheckBox.setText("Food");

        healthMedicalCheckBox.setText("Health & Medical");

        homeServicesCheckBox.setText("Home Services");

        homeGardenCheckBox.setText("Home & Garden");

        hospitalsCheckBox.setText("Hospitals");

        hotelsTravelCheckBox.setText("Hotels & Travel");

        hardwareStoresCheckBox.setText("Hardware Stores");

        groceryCheckBox.setText("Grocery");
        groceryCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groceryCheckBoxActionPerformed(evt);
            }
        });

        medicalCentersCheckBox.setText("Medical Centers");

        nurseriesGardeningCheckBox.setText("Nurseries & Gardening");

        nightlifeCheckBox.setText("Nightlife");

        restuarantsCheckBox.setText("Restaurants");

        shoppingCheckBox.setText("Shopping");

        transportationCheckBox.setText("Transportation");

        javax.swing.GroupLayout categoriesPanelLayout = new javax.swing.GroupLayout(categoriesPanel);
        categoriesPanel.setLayout(categoriesPanelLayout);
        categoriesPanelLayout.setHorizontalGroup(
            categoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(categoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeLifeCheckBox)
                    .addComponent(artsEntertainmentCheckBox)
                    .addComponent(automotiveCheckBox)
                    .addComponent(carRentalCheckBox)
                    .addComponent(cafesCheckBox)
                    .addComponent(beautySpasCheckBox)
                    .addComponent(convenienceStoresCheckBox)
                    .addComponent(dentistsCheckBox)
                    .addComponent(doctorsCheckBox)
                    .addComponent(drugstoresCheckBox)
                    .addComponent(departmentStoresCheckBox)
                    .addComponent(educationCheckBox)
                    .addComponent(eventPlanningServicesCheckBox)
                    .addComponent(flowersGiftsCheckBox)
                    .addComponent(foodCheckBox)
                    .addComponent(healthMedicalCheckBox)
                    .addComponent(homeServicesCheckBox)
                    .addComponent(homeGardenCheckBox)
                    .addComponent(hospitalsCheckBox)
                    .addComponent(hotelsTravelCheckBox)
                    .addComponent(hardwareStoresCheckBox)
                    .addComponent(groceryCheckBox)
                    .addComponent(medicalCentersCheckBox)
                    .addComponent(nurseriesGardeningCheckBox)
                    .addComponent(nightlifeCheckBox)
                    .addComponent(restuarantsCheckBox)
                    .addComponent(shoppingCheckBox)
                    .addComponent(transportationCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        categoriesPanelLayout.setVerticalGroup(
            categoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(activeLifeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(artsEntertainmentCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(automotiveCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carRentalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cafesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beautySpasCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(convenienceStoresCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dentistsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doctorsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drugstoresCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(departmentStoresCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(educationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventPlanningServicesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flowersGiftsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(foodCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(healthMedicalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeServicesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeGardenCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hospitalsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hotelsTravelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hardwareStoresCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(groceryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(medicalCentersCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nurseriesGardeningCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nightlifeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restuarantsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shoppingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transportationCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        categoriesScrollPane.setViewportView(categoriesPanel);

        subCategoriesScrollPane.setBackground(new java.awt.Color(238, 238, 238));
        subCategoriesScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Sub Categories"));

        javax.swing.GroupLayout subCategoriesPanelLayout = new javax.swing.GroupLayout(subCategoriesPanel);
        subCategoriesPanel.setLayout(subCategoriesPanelLayout);
        subCategoriesPanelLayout.setHorizontalGroup(
            subCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );
        subCategoriesPanelLayout.setVerticalGroup(
            subCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1088, Short.MAX_VALUE)
        );

        subCategoriesScrollPane.setViewportView(subCategoriesPanel);

        getSubCategoriesButton.setText("Get Sub Categories");
        getSubCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSubCategoriesButtonActionPerformed(evt);
            }
        });

        IncludeBusnCat.setText("Include in Query");

        javax.swing.GroupLayout businessPanelLayout = new javax.swing.GroupLayout(businessPanel);
        businessPanel.setLayout(businessPanelLayout);
        businessPanelLayout.setHorizontalGroup(
            businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(businessPanelLayout.createSequentialGroup()
                .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(businessPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(categoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(businessPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(IncludeBusnCat)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, businessPanelLayout.createSequentialGroup()
                        .addComponent(subCategoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, businessPanelLayout.createSequentialGroup()
                        .addComponent(getSubCategoriesButton)
                        .addGap(31, 31, 31))))
        );
        businessPanelLayout.setVerticalGroup(
            businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(businessPanelLayout.createSequentialGroup()
                .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IncludeBusnCat)
                    .addComponent(getSubCategoriesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(categoriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(subCategoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checkinPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Checkin"));

        fromDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));

        toDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));

        fromLabel.setText("From:");

        toLabel.setText("To:");

        fromTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTextFieldActionPerformed(evt);
            }
        });

        numOfCheckinsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Num Of Checkins"));

        valueOfCheckinsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueOfCheckinsTextFieldActionPerformed(evt);
            }
        });

        checkinConditionLabel.setText("Value:");

        CheckinSign.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", ">", "<" }));

        jLabel5.setText("Condition:");

        javax.swing.GroupLayout numOfCheckinsPanelLayout = new javax.swing.GroupLayout(numOfCheckinsPanel);
        numOfCheckinsPanel.setLayout(numOfCheckinsPanelLayout);
        numOfCheckinsPanelLayout.setHorizontalGroup(
            numOfCheckinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numOfCheckinsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(numOfCheckinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(numOfCheckinsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CheckinSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(numOfCheckinsPanelLayout.createSequentialGroup()
                        .addComponent(checkinConditionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(valueOfCheckinsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        numOfCheckinsPanelLayout.setVerticalGroup(
            numOfCheckinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numOfCheckinsPanelLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(numOfCheckinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckinSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(numOfCheckinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueOfCheckinsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkinConditionLabel))
                .addGap(27, 27, 27))
        );

        includeCheckinCheckBox.setText("Include in Query");

        javax.swing.GroupLayout checkinPanelLayout = new javax.swing.GroupLayout(checkinPanel);
        checkinPanel.setLayout(checkinPanelLayout);
        checkinPanelLayout.setHorizontalGroup(
            checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkinPanelLayout.createSequentialGroup()
                .addGroup(checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkinPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toLabel)
                            .addComponent(numOfCheckinsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromLabel)))
                    .addGroup(checkinPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(includeCheckinCheckBox))
                    .addGroup(checkinPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(toDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 6, Short.MAX_VALUE))
        );
        checkinPanelLayout.setVerticalGroup(
            checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkinPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(fromLabel)
                .addGap(9, 9, 9)
                .addGroup(checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(numOfCheckinsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includeCheckinCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Review"));

        jLabel1.setText("From:");

        jLabel2.setText("To:");

        starsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Stars"));

        valueOfStarsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueOfStarsTextFieldActionPerformed(evt);
            }
        });

        checkinConditionLabel2.setText("Value:");

        starsSignComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", ">", "<" }));

        jLabel7.setText("Condition:");

        javax.swing.GroupLayout starsPanelLayout = new javax.swing.GroupLayout(starsPanel);
        starsPanel.setLayout(starsPanelLayout);
        starsPanelLayout.setHorizontalGroup(
            starsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, starsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(starsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(starsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(checkinConditionLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(valueOfStarsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, starsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(starsSignComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );
        starsPanelLayout.setVerticalGroup(
            starsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, starsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(starsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(starsSignComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(starsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueOfStarsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkinConditionLabel2))
                .addContainerGap())
        );

        votesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Votes"));

        valueOfVotesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueOfVotesTextFieldActionPerformed(evt);
            }
        });

        votesValueLabel.setText("Value:");

        votesConditionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", ">", "<" }));

        votesConditionLabel.setText("Condition:");

        javax.swing.GroupLayout votesPanelLayout = new javax.swing.GroupLayout(votesPanel);
        votesPanel.setLayout(votesPanelLayout);
        votesPanelLayout.setHorizontalGroup(
            votesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, votesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(votesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(votesPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(votesValueLabel)
                        .addGap(18, 18, 18)
                        .addComponent(valueOfVotesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, votesPanelLayout.createSequentialGroup()
                        .addComponent(votesConditionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(votesConditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        votesPanelLayout.setVerticalGroup(
            votesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, votesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(votesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(votesConditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(votesConditionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(votesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueOfVotesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(votesValueLabel))
                .addContainerGap())
        );

        fromDateChooser.setDateFormatString("yyyy-MM-dd");

        toDateChooser.setDateFormatString("yyyy-MM-dd");

        includeReviewCheckBox.setText("Include in Query");
        includeReviewCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeReviewCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(toDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(starsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(votesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(includeReviewCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(starsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(votesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includeReviewCheckBox))
        );

        userPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));

        memberSinceLabel.setText("Member Since:");

        numOfFriendsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Num Of Friends"));

        valueOfNumOfFriendsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueOfNumOfFriendsTextFieldActionPerformed(evt);
            }
        });

        numOfFriendsValueLabel.setText("Value:");

        numOfFriendsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", ">", "<" }));

        numOfFriendsLabel.setText("Condition:");

        javax.swing.GroupLayout numOfFriendsPanelLayout = new javax.swing.GroupLayout(numOfFriendsPanel);
        numOfFriendsPanel.setLayout(numOfFriendsPanelLayout);
        numOfFriendsPanelLayout.setHorizontalGroup(
            numOfFriendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numOfFriendsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(numOfFriendsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(numOfFriendsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numOfFriendsValueLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueOfNumOfFriendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        numOfFriendsPanelLayout.setVerticalGroup(
            numOfFriendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numOfFriendsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(numOfFriendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOfFriendsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numOfFriendsLabel)
                    .addComponent(valueOfNumOfFriendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numOfFriendsValueLabel))
                .addContainerGap())
        );

        reviewCountPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Review Count"));

        valueOfReviewCountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueOfReviewCountTextFieldActionPerformed(evt);
            }
        });

        reviewCountValueLabel.setText("Value:");

        reviewCountComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", ">", "<" }));

        reviewCountLabel.setText("Condition:");

        javax.swing.GroupLayout reviewCountPanelLayout = new javax.swing.GroupLayout(reviewCountPanel);
        reviewCountPanel.setLayout(reviewCountPanelLayout);
        reviewCountPanelLayout.setHorizontalGroup(
            reviewCountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reviewCountPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reviewCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reviewCountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reviewCountValueLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueOfReviewCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        reviewCountPanelLayout.setVerticalGroup(
            reviewCountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reviewCountPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(reviewCountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reviewCountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reviewCountLabel)
                    .addComponent(valueOfReviewCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reviewCountValueLabel))
                .addContainerGap())
        );

        avgStarsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Avg. Stars"));

        valueOfAvgStarsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueOfAvgStarsTextFieldActionPerformed(evt);
            }
        });

        avgStarsValueLabel.setText("Value:");

        avgStarsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", ">", "<" }));

        avgStarsLabel.setText("Condition:");

        javax.swing.GroupLayout avgStarsPanelLayout = new javax.swing.GroupLayout(avgStarsPanel);
        avgStarsPanel.setLayout(avgStarsPanelLayout);
        avgStarsPanelLayout.setHorizontalGroup(
            avgStarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, avgStarsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(avgStarsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(avgStarsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(avgStarsValueLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueOfAvgStarsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        avgStarsPanelLayout.setVerticalGroup(
            avgStarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, avgStarsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(avgStarsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avgStarsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avgStarsLabel)
                    .addComponent(valueOfAvgStarsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(avgStarsValueLabel))
                .addContainerGap())
        );

        selectLabel.setText("Select:");

        selectWhereComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AND", "OR", "BETWEEN" }));

        memberSinceDateChooser.setDateFormatString("yyyy-MM");

        userQueryCheckBox.setText("Query on User");
        userQueryCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userQueryCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(avgStarsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(numOfFriendsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, userPanelLayout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addComponent(selectLabel)
                            .addGap(18, 18, 18)
                            .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userQueryCheckBox)
                                .addComponent(selectWhereComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, userPanelLayout.createSequentialGroup()
                            .addComponent(memberSinceLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(memberSinceDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(reviewCountPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(memberSinceLabel))
                    .addComponent(memberSinceDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reviewCountPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numOfFriendsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(avgStarsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectLabel)
                    .addComponent(selectWhereComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(userQueryCheckBox)
                .addContainerGap())
        );

        executeQueryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Build & Execute Query"));

        buildQueryTextArea.setColumns(20);
        buildQueryTextArea.setRows(5);
        buildQueryScrollPane.setViewportView(buildQueryTextArea);

        executeQueryButton.setText("Execute Query");
        executeQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout executeQueryPanelLayout = new javax.swing.GroupLayout(executeQueryPanel);
        executeQueryPanel.setLayout(executeQueryPanelLayout);
        executeQueryPanelLayout.setHorizontalGroup(
            executeQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executeQueryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildQueryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(executeQueryPanelLayout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(executeQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        executeQueryPanelLayout.setVerticalGroup(
            executeQueryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executeQueryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildQueryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executeQueryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        resultsScrollPane.setBackground(new java.awt.Color(238, 238, 238));
        resultsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("List of Results"));

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultsTable);

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultsScrollPane.setViewportView(resultsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(businessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(executeQueryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkinPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(businessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executeQueryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkinPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void convenienceStoresCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convenienceStoresCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_convenienceStoresCheckBoxActionPerformed

    private void beautySpasCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beautySpasCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_beautySpasCheckBoxActionPerformed

    private void groceryCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groceryCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_groceryCheckBoxActionPerformed

    private void valueOfCheckinsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueOfCheckinsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueOfCheckinsTextFieldActionPerformed

    private void fromTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromTextFieldActionPerformed

    private void valueOfStarsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueOfStarsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueOfStarsTextFieldActionPerformed

    private void valueOfReviewCountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueOfReviewCountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueOfReviewCountTextFieldActionPerformed

    private void valueOfNumOfFriendsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueOfNumOfFriendsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueOfNumOfFriendsTextFieldActionPerformed

    private void valueOfAvgStarsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueOfAvgStarsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueOfAvgStarsTextFieldActionPerformed

    private void valueOfVotesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueOfVotesTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valueOfVotesTextFieldActionPerformed

    //String selectedCategories = "";
    String mainQuery = "";
    //ArrayList<String> subCategories = new ArrayList<String>();
    String subQuery = "";

    private void executeQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryButtonActionPerformed
        // TODO add your handling code here:
        mainQuery = "";
        subQuery = "";
        if (userQueryCheckBox.isSelected() && !IncludeBusnCat.isSelected()) {
            String yelpingSince = ((JTextField) memberSinceDateChooser.getDateEditor().getUiComponent()).getText();
            String reviewCount = valueOfReviewCountTextField.getText();
            String reviewCountSign = (String) reviewCountComboBox.getSelectedItem();
            String friends = valueOfNumOfFriendsTextField.getText();
            String friendsSign = (String) numOfFriendsComboBox.getSelectedItem();
            String avgStars = valueOfAvgStarsTextField.getText();
            String avgStarsSign = (String) avgStarsComboBox.getSelectedItem();
            String queryBind = (String) selectWhereComboBox.getSelectedItem();
            

            mainQuery = "SELECT * FROM Yelp_User ";
            if (yelpingSince.length() == 7) {
                mainQuery += "WHERE yelpingSince < '" + yelpingSince + "'";
                if (!reviewCount.equals("") || !friends.equals("") || !avgStars.equals("")) {
                    mainQuery +=" AND UserID IN (";
                }
            }
            if (!reviewCount.equals("") || !friends.equals("") || !avgStars.equals("")) {
                boolean isAnotherQuery = false;
                if(yelpingSince.length() != 7)
                    mainQuery += "WHERE UserID IN (";
                if (!reviewCount.equals("")) {
                    mainQuery += "SELECT UserID FROM Review GROUP BY UserID HAVING COUNT(UserID) " + reviewCountSign + " " + reviewCount;
                    isAnotherQuery = true;
                }
                String partialQuery;
                if (!avgStars.equals("")) {
                    partialQuery = "SELECT UserID FROM Review GROUP BY UserID HAVING AVG(Stars) " + avgStarsSign + " " + avgStars;
                    if (isAnotherQuery) {
                        if (queryBind.equals("AND")) {
                            mainQuery += " INTERSECT " + partialQuery;
                        } else if (queryBind.equals("OR")) {
                            mainQuery += " UNION " + partialQuery;
                        }
                        
                    } else {
                        mainQuery = mainQuery + " " + partialQuery;
                    }
                    isAnotherQuery = true;
                }
                if (!friends.equals("")) {
                    partialQuery = " SELECT UserID FROM Yelp_User WHERE NumOfFriends " + friendsSign + " " + friends;
                    if (isAnotherQuery) {
                        if (queryBind.equals("AND")) {
                            mainQuery += " INTERSECT" + partialQuery;
                        } else if (queryBind.equals("OR")) {
                            mainQuery += " UNION" + partialQuery;
                        }
                    } else {
                        mainQuery = mainQuery + " " + partialQuery; 
                    }
                }
            }

        } else {
            mainQuery = "SELECT * FROM Business";

            ArrayList<String> BusiCateg = new ArrayList();
            if (IncludeBusnCat.isSelected()) {

                for (Component c : categoriesPanel.getComponents()) {
                    if (c.getClass().equals(javax.swing.JCheckBox.class)) {
                        JCheckBox jcb = (JCheckBox) c;
                        if (jcb.isSelected()) {
                            BusiCateg.add(jcb.getText());
                        }
                    }
                }
                if (BusiCateg.size() > 0 && BusiCateg.size() < 28) {
                    if (BusiCateg.size() > 0) {
                        subQuery = " WHERE BusinessID IN (";
                        subQuery += "SELECT DISTINCT BusinessID FROM Business_Category WHERE CategoryName IN (";
                        for (int i = 0; i < BusiCateg.size(); i++) {
                            subQuery = subQuery + "'" + BusiCateg.get(i) + "'";
                            if (!(i + 1 == BusiCateg.size())) {
                                subQuery = subQuery + " , ";
                            }
                        }
                        subQuery = subQuery + " )";
                    }
                }

                ArrayList<String> SubCateg = new ArrayList();
                for (Component c : subCategoriesPanel.getComponents()) {
                    if (c.getClass().equals(javax.swing.JCheckBox.class)) {
                        JCheckBox jcb = (JCheckBox) c;
                        if (jcb.isSelected()) {
                            SubCateg.add(jcb.getText());
                        }
                    }
                }

                if (SubCateg.size() > 0) {
                    subQuery += " INTERSECT SELECT DISTINCT BusinessID FROM Business_Category WHERE SubCategoryName IN (";
                    for (int i = 0; i < SubCateg.size(); i++) {
                        subQuery = subQuery + "'" + SubCateg.get(i).trim() + "'";
                        if (!(i + 1 == SubCateg.size())) {
                            subQuery = subQuery + " , ";
                        }
                    }
                    subQuery = subQuery + " )";
                }

                System.out.println(subQuery);
            }

            //Checkin
            Integer fromDate = fromDayComboBox.getSelectedIndex();
            Integer ToDate = toDayComboBox.getSelectedIndex();
            String fromHrs = fromTextField.getText();
            String toHrs = toTextField.getText();
            String selectedSign = (String) CheckinSign.getSelectedItem();
            String value = valueOfCheckinsTextField.getText();

            if (includeCheckinCheckBox.isSelected()) {
                if (BusiCateg.size() == 0) {
                    subQuery = " WHERE BusinessID IN ( SELECT DISTINCT BusinessID FROM Checkin";
                } else {
                    subQuery += " INTERSECT SELECT DISTINCT BusinessID FROM Checkin";
                }

                if (!fromHrs.equals("")) {
                    Float fromday = fromDate + Integer.parseInt(fromHrs) / 48F;
                    subQuery += " WHERE dayandtime > " + fromday;
                }
                if (!toHrs.equals("")) {
                    Float today = ToDate + Integer.parseInt(toHrs) / 48F;
                    subQuery += " AND dayandtime < " + today;
                }
                if (!value.equals("")) {
                    subQuery += " AND CheckinCount " + selectedSign + " " + value;
                }
                //subQuery += ")";

                System.out.println(subQuery);

            }

            //Review Selection
            if (includeReviewCheckBox.isSelected()) {
                if (BusiCateg.size() == 0 && fromHrs.equals("") && toHrs.equals("") && value.equals("")) {
                    subQuery = " WHERE BusinessID IN (SELECT BusinessID FROM Review";
                } else if (BusiCateg.size() > 0 || (!fromHrs.equals("") || !toHrs.equals("") || !value.equals(""))) {
                    subQuery += " INTERSECT SELECT BusinessID FROM Review";
                }

                String reviewFrom = ((JTextField) fromDateChooser.getDateEditor().getUiComponent()).getText();
                String reviewTo = ((JTextField) toDateChooser.getDateEditor().getUiComponent()).getText();
                String votes = valueOfVotesTextField.getText();
                String votesSign = (String) votesConditionComboBox.getSelectedItem();
                String avgStarsSign = (String) starsSignComboBox.getSelectedItem();
                String stars = valueOfStarsTextField.getText();

                //Stars
                if (!votes.equals("") || !reviewFrom.equals("") || !reviewTo.equals("") || !stars.equals("")) {
                    if (!reviewFrom.equals("")) {
                        subQuery += " WHERE PublishDate >= '" + reviewFrom + "'";
                    }
                    if (!reviewTo.equals("")) {
                        if (reviewFrom.equals("")) {
                            subQuery += " WHERE";
                        } else {
                            subQuery += " AND";
                        }
                        subQuery += " PublishDate < '" + reviewTo + "'";
                    }
                    subQuery += " GROUP BY BusinessID ";
                    if (!votes.equals("")) {
                        subQuery += " HAVING getTotalVotes(AVG(FunnyVotes),AVG(UsefulVotes),AVG(CoolVotes)) " + votesSign + " " + votes;
                    }
                    if (!stars.equals("")) {
                        if (!votes.equals("")) {
                            subQuery += " AND";
                        } else {
                            subQuery += " HAVING";
                        }
                        subQuery += " AVG(stars) " + avgStarsSign + " " + stars;
                    }

                }

                //SELECT BID FROM REVIEWS WHERE PUBLISHEDDATE > '2012-03-06' GROUP BY BID HAVING VOTESUM(AVG(FUNNYVOTES), AVG(COOLVOTES), AVG(USEFULVOTES))>30;
            }
        }
        
        if(userQueryCheckBox.isSelected()){
            mainQuery += ")";
        } else {
            mainQuery += subQuery + ")";
        }
        buildQueryTextArea.setText(mainQuery);
        PopulateTable();

    }//GEN-LAST:event_executeQueryButtonActionPerformed

    private void PopulateTable() {
        try {
            System.out.println(mainQuery);
            Connection con = Populate.openConnection();
            Statement statement = con.createStatement();
            if (userQueryCheckBox.isSelected()) {
                statement.executeUpdate("ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM'");
            } else {
                statement.executeUpdate("ALTER SESSION SET NLS_DATE_FORMAT='YYYY-MM-DD'");
            }
            ResultSet res = statement.executeQuery(mainQuery);

            ResultSetMetaData rsmd = res.getMetaData();
            DefaultTableModel model = new DefaultTableModel();

            model.setColumnCount(rsmd.getColumnCount());
            Vector<String> cols = new Vector();
            for (int i = 0; i < rsmd.getColumnCount(); i++) {
                cols.add(rsmd.getColumnName(i + 1));
            }
            model.setColumnIdentifiers(cols);
            while (res.next()) {
                Vector<String> rows = new Vector();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    rows.add(res.getString(rsmd.getColumnName(i + 1)));
                }
                model.addRow(rows);
            }
            resultsTable.setModel(model);

            /*ListSelectionModel cellSelectionModel = resultsTable.getSelectionModel();
            cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    int selectedRow = resultsTable.getSelectedRow();
                    String id = (String) resultsTable.getValueAt(selectedRow, 0);
                    if (userQueryCheckBox.isSelected()) {
                        mainQuery = "SELECT * FROM Review WHERE UserID = " + "'" + id + "'";
                    } else {
                        mainQuery = "SELECT * FROM Review WHERE BusinessID = " + "'" + id + "'";
                    }
                    PopulateTable();
                }
            });*/
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            Populate.closeConnection(con);
        }
    }

    private void queryReviewTable() {

    }


    private void getSubCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSubCategoriesButtonActionPerformed
        // TODO add your handling code here:

        String query = "";
        ArrayList<String> BusiCateg = new ArrayList();
        for (Component c : categoriesPanel.getComponents()) {
            if (c.getClass().equals(javax.swing.JCheckBox.class)) {
                JCheckBox jcb = (JCheckBox) c;
                if (jcb.isSelected()) {
                    BusiCateg.add(jcb.getText());
                }
            }
        }

        if (BusiCateg.size() > 0) {
            query = "select distinct SubCategoryName from Business_Category where CategoryName in (";
            for (int i = 0; i < BusiCateg.size(); i++) {
                query = query + "'" + BusiCateg.get(i) + "'";
                if (!(i + 1 == BusiCateg.size())) {
                    query = query + " , ";
                }
            }
            query = query + " )";
        }

        ArrayList<String> SubCateg = new ArrayList();

        System.out.println(query);
        subCategoriesPanel.removeAll();
        try {
            Statement subCatStatement = con.createStatement();
            ResultSet res = subCatStatement.executeQuery(query);
            ArrayList subCatCheckBoxs = new ArrayList();
            while (res.next()) {
                JCheckBox newCheckBox = new JCheckBox();
                newCheckBox.setText(res.getString(1) + "\n");
                subCatCheckBoxs.add(newCheckBox);
            }
            subCategoriesPanel.setLayout(new GridLayout(0, 1, 10, 10));
            for (Object ch : subCatCheckBoxs) {
                subCategoriesPanel.add((JCheckBox) ch);
                subCategoriesPanel.revalidate();
                subCategoriesPanel.repaint();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_getSubCategoriesButtonActionPerformed

    private void includeReviewCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeReviewCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_includeReviewCheckBoxActionPerformed

    private void userQueryCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userQueryCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userQueryCheckBoxActionPerformed

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = resultsTable.getSelectedRow();
        String id = (String) resultsTable.getValueAt(selectedRow, 0);
        if (userQueryCheckBox.isSelected()) {
            mainQuery = "SELECT * FROM Review WHERE UserID = " + "'" + id + "'";
        } else {
            mainQuery = "SELECT * FROM Review WHERE BusinessID = " + "'" + id + "'";
        }
        PopulateTable();
    }//GEN-LAST:event_resultsTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CheckinSign;
    private javax.swing.JCheckBox IncludeBusnCat;
    private javax.swing.JCheckBox activeLifeCheckBox;
    private javax.swing.JCheckBox artsEntertainmentCheckBox;
    private javax.swing.JCheckBox automotiveCheckBox;
    private javax.swing.JComboBox avgStarsComboBox;
    private javax.swing.JLabel avgStarsLabel;
    private javax.swing.JPanel avgStarsPanel;
    private javax.swing.JLabel avgStarsValueLabel;
    private javax.swing.JCheckBox beautySpasCheckBox;
    private javax.swing.JScrollPane buildQueryScrollPane;
    private javax.swing.JTextArea buildQueryTextArea;
    private javax.swing.JPanel businessPanel;
    private javax.swing.JCheckBox cafesCheckBox;
    private javax.swing.JCheckBox carRentalCheckBox;
    private javax.swing.JPanel categoriesPanel;
    private javax.swing.JScrollPane categoriesScrollPane;
    private javax.swing.JLabel checkinConditionLabel;
    private javax.swing.JLabel checkinConditionLabel2;
    private javax.swing.JPanel checkinPanel;
    private javax.swing.JCheckBox convenienceStoresCheckBox;
    private javax.swing.JCheckBox dentistsCheckBox;
    private javax.swing.JCheckBox departmentStoresCheckBox;
    private javax.swing.JCheckBox doctorsCheckBox;
    private javax.swing.JCheckBox drugstoresCheckBox;
    private javax.swing.JCheckBox educationCheckBox;
    private javax.swing.JCheckBox eventPlanningServicesCheckBox;
    private javax.swing.JButton executeQueryButton;
    private javax.swing.JPanel executeQueryPanel;
    private javax.swing.JCheckBox flowersGiftsCheckBox;
    private javax.swing.JCheckBox foodCheckBox;
    private com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JComboBox fromDayComboBox;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JButton getSubCategoriesButton;
    private javax.swing.JCheckBox groceryCheckBox;
    private javax.swing.JCheckBox hardwareStoresCheckBox;
    private javax.swing.JCheckBox healthMedicalCheckBox;
    private javax.swing.JCheckBox homeGardenCheckBox;
    private javax.swing.JCheckBox homeServicesCheckBox;
    private javax.swing.JCheckBox hospitalsCheckBox;
    private javax.swing.JCheckBox hotelsTravelCheckBox;
    private javax.swing.JCheckBox includeCheckinCheckBox;
    private javax.swing.JCheckBox includeReviewCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox medicalCentersCheckBox;
    private com.toedter.calendar.JDateChooser memberSinceDateChooser;
    private javax.swing.JLabel memberSinceLabel;
    private javax.swing.JCheckBox nightlifeCheckBox;
    private javax.swing.JPanel numOfCheckinsPanel;
    private javax.swing.JComboBox numOfFriendsComboBox;
    private javax.swing.JLabel numOfFriendsLabel;
    private javax.swing.JPanel numOfFriendsPanel;
    private javax.swing.JLabel numOfFriendsValueLabel;
    private javax.swing.JCheckBox nurseriesGardeningCheckBox;
    private javax.swing.JCheckBox restuarantsCheckBox;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JComboBox reviewCountComboBox;
    private javax.swing.JLabel reviewCountLabel;
    private javax.swing.JPanel reviewCountPanel;
    private javax.swing.JLabel reviewCountValueLabel;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JComboBox selectWhereComboBox;
    private javax.swing.JCheckBox shoppingCheckBox;
    private javax.swing.JPanel starsPanel;
    private javax.swing.JComboBox starsSignComboBox;
    private javax.swing.JPanel subCategoriesPanel;
    private javax.swing.JScrollPane subCategoriesScrollPane;
    private com.toedter.calendar.JDateChooser toDateChooser;
    private javax.swing.JComboBox toDayComboBox;
    private javax.swing.JLabel toLabel;
    private javax.swing.JTextField toTextField;
    private javax.swing.JCheckBox transportationCheckBox;
    private javax.swing.JPanel userPanel;
    private javax.swing.JCheckBox userQueryCheckBox;
    private javax.swing.JTextField valueOfAvgStarsTextField;
    private javax.swing.JTextField valueOfCheckinsTextField;
    private javax.swing.JTextField valueOfNumOfFriendsTextField;
    private javax.swing.JTextField valueOfReviewCountTextField;
    private javax.swing.JTextField valueOfStarsTextField;
    private javax.swing.JTextField valueOfVotesTextField;
    private javax.swing.JComboBox votesConditionComboBox;
    private javax.swing.JLabel votesConditionLabel;
    private javax.swing.JPanel votesPanel;
    private javax.swing.JLabel votesValueLabel;
    // End of variables declaration//GEN-END:variables
}
